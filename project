#Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator

#Setting random seed for reproducibility
np.random.seed(42)
tf.random.set_seed(42)

#Load and preprocess the dataset
image_size = (128, 128)
data_dir = "/content/drive/MyDrive/machine learning/project/Dataset"
datagen = ImageDataGenerator(rescale=1.0/255, validation_split=0.2)

train_data = datagen.flow_from_directory(
    data_dir,
    target_size=image_size,
    batch_size=32,
    class_mode='categorical',
    subset='training',
    shuffle=True
)

val_data = datagen.flow_from_directory(
    data_dir,
    target_size=image_size,
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

#Conventional Machine Learning Approach
#Feature extraction using pre-trained model
from tensorflow.keras.applications import VGG16

vgg_model = VGG16(weights='imagenet', include_top=False, input_shape=(128, 128, 3))
features_train = vgg_model.predict(train_data, verbose=1)
features_val = vgg_model.predict(val_data, verbose=1)

#Flattening the features
features_train_flat = features_train.reshape(features_train.shape[0], -1)
features_val_flat = features_val.reshape(features_val.shape[0], -1)

encoder = LabelEncoder()
train_labels = encoder.fit_transform(train_data.classes)
val_labels = encoder.transform(val_data.classes)

# Training a classifier (e.g., Random Forest)
from sklearn.ensemble import RandomForestClassifier

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(features_train_flat, train_labels)

# Evaluate the Random Forest model
rf_predictions = rf_model.predict(features_val_flat)
print("Random Forest Classification Report:")
print(classification_report(val_labels, rf_predictions))

#CNN Approach
cnn_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(train_data.num_classes, activation='softmax')
])

cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = cnn_model.fit(
    train_data,
    epochs=10,
    validation_data=val_data
)

#Evaluate the CNN model
cnn_results = cnn_model.evaluate(val_data)
print("CNN Evaluation:", cnn_results)

#Plot training history
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.legend()
plt.title('CNN Training Accuracy')
plt.show()
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.legend()
plt.title('CNN Training Loss')
plt.show()

#Save the trained CNN model
# Change the file extension to .keras or .h5
cnn_model.save('/content/drive/MyDrive/machine learning/project/Image_3.keras') # or Image_3.h5

from tensorflow.keras.preprocessing.image import load_img, img_to_array

def preprocess_image(image_path, target_size=(128, 128)):
    image = load_img(image_path, target_size=target_size)
    image_array = img_to_array(image) / 255.0  # Normalize
    image_array = np.expand_dims(image_array, axis=0)  # Add batch dimension
    return image_array

image_path = '/content/drive/MyDrive/machine learning/project/Image_3.jpg'
processed_image = preprocess_image(image_path)

predictions = cnn_model.predict(processed_image) # Change model to cnn_model
predicted_class = np.argmax(predictions, axis=1)
class_indices = {v: k for k, v in train_data.class_indices.items()}  # Reverse mapping
print(f"Predicted class: {class_indices[predicted_class[0]]}")

from matplotlib import pyplot as plt

image = load_img(image_path, target_size=(128, 128))
plt.imshow(image)
plt.title(f"Predicted: {class_indices[predicted_class[0]]}")
plt.axis('off')
plt.show()
